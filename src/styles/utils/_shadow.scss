@use 'sass:list';

@mixin shadow($positions...) {
    $shadow: none;

    @each $position-key, $size-key in $positions {
        @if not list.index($extended-position-keys, $position-key) {
            @error "No position #{$position-key}";
        }

        @if not list.index($size-keys, $size-key) {
            @error "No size #{$size-key}";
        }

        @if $position-key ==
            top or
            $position-key ==
            left or
            $position-key ==
            top-left or
            $position-key ==
            all
        {
            $top-left-shadow: var(--sbsys-shadows-top-left-#{$size-key})
                rgb(
                    var(--sbsys-shadows-top-left-color) /
                        var(--sbsys-shadows-top-left-opacity)
                );

            @if $shadow == none {
                $shadow: $top-left-shadow;
            } @else {
                $shadow: $shadow, $top-left-shadow;
            }
        }

        @if $position-key ==
            top or
            $position-key ==
            right or
            $position-key ==
            top-right or
            $position-key ==
            all
        {
            $top-right-shadow: var(--sbsys-shadows-top-right-#{$size-key})
                rgb(
                    var(--sbsys-shadows-top-right-color) /
                        var(--sbsys-shadows-top-right-opacity)
                );

            @if $shadow == none {
                $shadow: $top-right-shadow;
            } @else {
                $shadow: $shadow, $top-right-shadow;
            }
        }

        @if $position-key ==
            bottom or
            $position-key ==
            left or
            $position-key ==
            bottom-left or
            $position-key ==
            all
        {
            $bottom-left-shadow: var(--sbsys-shadows-bottom-left-#{$size-key})
                rgb(
                    var(--sbsys-shadows-bottom-left-color) /
                        var(--sbsys-shadows-bottom-left-opacity)
                );

            @if $shadow == none {
                $shadow: $bottom-left-shadow;
            } @else {
                $shadow: $shadow, $bottom-left-shadow;
            }
        }

        @if $position-key ==
            bottom or
            $position-key ==
            right or
            $position-key ==
            bottom-right or
            $position-key ==
            all
        {
            $bottom-right-shadow: var(--sbsys-shadows-bottom-right-#{$size-key})
                rgb(
                    var(--sbsys-shadows-bottom-right-color) /
                        var(--sbsys-shadows-bottom-right-opacity)
                );

            @if $shadow == none {
                $shadow: $bottom-right-shadow;
            } @else {
                $shadow: $shadow, $bottom-right-shadow;
            }
        }
    }

    box-shadow: $shadow;
}

@mixin shadow-color($positions...) {
    @each $position-key, $theme-key, $serie-key, $intensity-key in $positions {
        @if not list.index($extended-position-keys, $position-key) {
            @error "No position #{$position-key}";
        }

        @if $position-key ==
            top or
            $position-key ==
            left or
            $position-key ==
            top-left or
            $position-key ==
            all
        {
            --sbsys-shadows-top-left-color: #{serie(
                    $theme-key,
                    $serie-key,
                    $intensity-key
                )};
        }

        @if $position-key ==
            top or
            $position-key ==
            right or
            $position-key ==
            top-right or
            $position-key ==
            all
        {
            --sbsys-shadows-top-right-color: #{serie(
                    $theme-key,
                    $serie-key,
                    $intensity-key
                )};
        }

        @if $position-key ==
            bottom or
            $position-key ==
            left or
            $position-key ==
            bottom-left or
            $position-key ==
            all
        {
            --sbsys-shadows-bottom-left-color: #{serie(
                    $theme-key,
                    $serie-key,
                    $intensity-key
                )};
        }

        @if $position-key ==
            bottom or
            $position-key ==
            right or
            $position-key ==
            bottom-right or
            $position-key ==
            all
        {
            --sbsys-shadows-bottom-right-color: #{serie(
                    $theme-key,
                    $serie-key,
                    $intensity-key
                )};
        }
    }
}

@mixin shadow-opacity($positions...) {
    @each $position-key, $size-key in $positions {
        @if not list.index($extended-position-keys, $position-key) {
            @error "No position #{$position-key}";
        }

        @if $position-key ==
            top or
            $position-key ==
            left or
            $position-key ==
            top-left or
            $position-key ==
            all
        {
            --sbsys-shadows-top-left-opacity: #{opacity($size-key)};
        }

        @if $position-key ==
            top or
            $position-key ==
            right or
            $position-key ==
            top-right or
            $position-key ==
            all
        {
            --sbsys-shadows-top-right-opacity: #{opacity($size-key)};
        }

        @if $position-key ==
            bottom or
            $position-key ==
            left or
            $position-key ==
            bottom-left or
            $position-key ==
            all
        {
            --sbsys-shadows-bottom-left-opacity: #{opacity($size-key)};
        }

        @if $position-key ==
            bottom or
            $position-key ==
            right or
            $position-key ==
            bottom-right or
            $position-key ==
            all
        {
            --sbsys-shadows-bottom-right-opacity: #{opacity($size-key)};
        }
    }
}
